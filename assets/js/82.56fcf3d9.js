(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{665:function(a,t,v){"use strict";v.r(t);var _=v(26),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"云-端"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#云-端"}},[a._v("#")]),a._v(" 云 + 端")]),a._v(" "),v("h2",{attrs:{id:"faas-函数即服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#faas-函数即服务"}},[a._v("#")]),a._v(" FaaS 函数即服务")]),a._v(" "),v("p",[a._v("这里的函数，可以当做一个小容器，原来我们要写一个完整的应用来承载能力，现在只需要写中间的逻辑部分，以及考虑输入和输出的数据。")]),a._v(" "),v("p",[a._v("通过绑定平台的触发器，可以承载例如 HTTP，Socket 等流量。")]),a._v(" "),v("p",[a._v("通过平台提供的 BaaS SDK，可以对外调用数据库，Redis 等服务。")]),a._v(" "),v("p",[a._v("某种程度上，Serviceless = Faas + BaaS。")]),a._v(" "),v("p",[a._v("Serverless的应用架构是将 BaaS 和 FaaS 组合在一起的应用，用户只需要关注应用的业务逻辑代码，编写函数为粒度将其运行在FaaS平台上，并且和BaaS第三方服务整合在一起，最后就搭建了一个完整的系统。整个系统过程中完全无需关注服务器。")]),a._v(" "),v("h3",{attrs:{id:"能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#能"}},[a._v("#")]),a._v(" 能")]),a._v(" "),v("ul",[v("li",[a._v("HTTP API 服务")]),a._v(" "),v("li",[a._v("数据模块\n"),v("ul",[v("li",[a._v("文件上传变更")])])])]),a._v(" "),v("h3",{attrs:{id:"不能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不能"}},[a._v("#")]),a._v(" 不能")]),a._v(" "),v("ul",[v("li",[a._v("执行时间超过函数配置下限制的（最好不超过 5s）")]),a._v(" "),v("li",[a._v("有状态，在本地存储数据的")]),a._v(" "),v("li",[a._v("长链接，比如 ws 等")]),a._v(" "),v("li",[a._v("后台任务，有大数据执行的")]),a._v(" "),v("li",[a._v("依赖多进程通信的")]),a._v(" "),v("li",[a._v("大文件上传（比如网关限制的 2M 以上）")]),a._v(" "),v("li",[a._v("自定义环境的，比如 nginx 配置，c++ 库(c++ addon 动态链接库等)，python 版本依赖的")]),a._v(" "),v("li",[a._v("大量服务端渲染（服务端渲染需要缓存，不是很适合函数场景）")])])])}),[],!1,null,null,null);t.default=s.exports}}]);