(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{678:function(t,a,s){"use strict";s.r(a);var e=s(26),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"异步-javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步-javascript"}},[t._v("#")]),t._v(" 异步 JavaScript")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous",target:"_blank",rel:"noopener noreferrer"}},[t._v("异步 JavaScript——MDN"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("code",[t._v("JavaScript")]),t._v(" 本身是一门单线程的语言，它通过"),s("strong",[t._v("回调函数")]),t._v("和"),s("strong",[t._v("事件循环机制")]),t._v("，对任务进行异步处理，来实现对多任务的处理。")]),t._v(" "),s("h2",{attrs:{id:"_1-进程与线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程与线程"}},[t._v("#")]),t._v(" 1. 进程与线程")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程与线程的一个简单解释——阮一峰"),s("OutboundLink")],1),t._v(" （文章有偏颇，可看评论加深理解）")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/zhehan54/p/6130030.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("一道面试题：说说进程和线程的区别"),s("OutboundLink")],1)])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("特点")]),t._v(" "),s("th",[t._v("进程")]),t._v(" "),s("th",[t._v("线程")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("本质")]),t._v(" "),s("td",[t._v("资源分配的最小单位")]),t._v(" "),s("td",[t._v("程序执行的最小单位")])]),t._v(" "),s("tr",[s("td",[t._v("地址空间")]),t._v(" "),s("td",[t._v("进程间独立")]),t._v(" "),s("td",[t._v("同进程共享地址空间")])]),t._v(" "),s("tr",[s("td",[t._v("成本")]),t._v(" "),s("td",[t._v("开销大")]),t._v(" "),s("td",[t._v("开销小")])]),t._v(" "),s("tr",[s("td",[t._v("通信")]),t._v(" "),s("td",[t._v("难")]),t._v(" "),s("td",[s("strong",[t._v("同一个进程中各个线程之间共享同一块内存空间")])])]),t._v(" "),s("tr",[s("td",[t._v("健壮性")]),t._v(" "),s("td",[t._v("强，一个进程挂掉不影响其他进程")]),t._v(" "),s("td",[t._v("差，一个线程挂掉，整个进程就挂掉")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-1-浏览器中的多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-浏览器中的多线程"}},[t._v("#")]),t._v(" 1.1 浏览器中的多线程")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/gg-qq/p/11125652.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器的多线程"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("浏览器内核是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，通常也被称为渲染引擎。")]),t._v(" "),s("p",[t._v("Chrome 浏览器为每个 Tab 页面单独开启一个进程，每个进程中包含自己的多线程。")]),t._v(" "),s("p",[t._v("浏览器内核是多线程，在内核控制下各线程相互配合以保持同步，一个浏览器通常由以下常驻线程组成：")]),t._v(" "),s("ul",[s("li",[t._v("GUI 渲染线程")]),t._v(" "),s("li",[t._v("JavaScript 引擎线程")]),t._v(" "),s("li",[t._v("事件触发线程")]),t._v(" "),s("li",[t._v("定时触发器线程")]),t._v(" "),s("li",[t._v("异步 http 请求线程")])]),t._v(" "),s("blockquote",[s("p",[t._v("GUI 线程与 JS 引擎互斥（因为 JS 可以操作 DOM）")])]),t._v(" "),s("p",[s("strong",[t._v("多线程的工作流程")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("GUI 线程")]),t._v("渲染页面")]),t._v(" "),s("li",[s("code",[t._v("JS 引擎线程")]),t._v("处理"),s("strong",[t._v("任务队列")]),t._v("，与 "),s("code",[t._v("GUI 线程")]),t._v(" 互斥")]),t._v(" "),s("li",[t._v("有事件触发时，"),s("code",[t._v("事件触发线程")]),t._v("将事件回调加入"),s("strong",[t._v("任务队列")])]),t._v(" "),s("li",[t._v("定时计数器由浏览器的单独线程("),s("code",[t._v("定时触发器线程")]),t._v(")执行（防止 JS 线程阻塞影响计数效果），计数结束后，将定时回调加入"),s("strong",[t._v("任务队列")])]),t._v(" "),s("li",[s("code",[t._v("XMLHttpRequest")]),t._v(" 由"),s("code",[t._v("异步请求线程")]),t._v("执行，检测到状态变更后，将请求回调加入"),s("strong",[t._v("任务队列")])])]),t._v(" "),s("h3",{attrs:{id:"_1-2-javascript-中的线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-javascript-中的线程"}},[t._v("#")]),t._v(" 1.2 JavaScript 中的线程")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Main_thread",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 主线程"),s("OutboundLink")],1),t._v(" 用于浏览器处理用户事件和页面绘制等。")]),t._v(" "),s("p",[t._v("默认情况下，浏览器在一个线程中运行一个页面中的所有 JavaScript 脚本，以及呈现布局，回流，和垃圾回收。")]),t._v(" "),s("p",[t._v("这意味着一个长时间运行的 JavaScript 会阻塞线程，导致页面无法响应，造成不佳的用户体验。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-线程间通信-web-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-线程间通信-web-worker"}},[t._v("#")]),t._v(" 1.3 线程间通信（Web Worker）")]),t._v(" "),s("ul",[s("li",[t._v("大计算量的代码，js单线程一旦遇到就会发生阻塞，所以可以把这部分代码分到另一个线程，让主线程 不至于被挂起，当然是通过 "),s("code",[t._v("postMessage")]),t._v("，"),s("code",[t._v("onmessage")]),t._v(" 进行通信。")]),t._v(" "),s("li",[t._v("可以使用 importScript（url）加载另外的脚本文件")]),t._v(" "),s("li",[t._v("可以使用setTimeout(),clearTimeout(),setInterval(), clearInterval()做一些东西。")]),t._v(" "),s("li",[t._v("可以通过XMLHttpRequest来发送请求")]),t._v(" "),s("li",[t._v("可以访问navigator，location，JSON，application等等重要的全局变量的部分属性")])]),t._v(" "),s("h2",{attrs:{id:"_2-事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件循环"}},[t._v("#")]),t._v(" 2. 事件循环")]),t._v(" "),s("p",[t._v("事件循环负责"),s("strong",[t._v("收集事件")]),t._v("（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候"),s("strong",[t._v("执行回调")]),t._v("。然后它执行所有处于等待中的 "),s("code",[t._v("JavaScript")]),t._v(" 任务（"),s("strong",[t._v("宏任务")]),t._v("），然后是"),s("strong",[t._v("微任务")]),t._v("，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。")]),t._v(" "),s("ol",[s("li",[t._v("当主线程执行完成后，先把微任务队列清空，然后从宏任务队列取出一条任务进行执行；")]),t._v(" "),s("li",[t._v("在当前宏任务执行完成后，取出下一条宏任务之前，仍需首先把微任务队列清空；")]),t._v(" "),s("li",[t._v("循环往复，直到两个任务队列全为空。")])]),t._v(" "),s("h3",{attrs:{id:"_2-1-宏任务与微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-宏任务与微任务"}},[t._v("#")]),t._v(" 2.1 宏任务与微任务")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入：微任务与Javascript运行时环境——MDN"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("一个任务就是指计划由标准机制来执行的任何 JavaScript，如程序的初始化、事件触发的回调等。 除了使用"),s("code",[t._v("事件")]),t._v("，你还可以使用 "),s("code",[t._v("setTimeout()")]),t._v(" 或者 "),s("code",[t._v("setInterval()")]),t._v(" 来添加任务。")]),t._v(" "),s("p",[t._v("区别")]),t._v(" "),s("ul",[s("li",[t._v("当执行来自任务队列中的任务时，在每一次新的事件循环开始迭代的时候运行时都会执行队列中的每个任务。在每次迭代开始之后加入到队列中的任务需要在下一次迭代开始之后才会被执行")]),t._v(" "),s("li",[t._v("每次当一个任务退出且执行上下文为空的时候，微任务队列中的每一个微任务会依次被执行。不同的是它会等到微任务队列为空才会停止执行——即使中途有微任务加入")]),t._v(" "),s("li",[t._v("微任务可以添加新的微任务到队列中，并在下一个任务开始执行之前且当前事件循环结束之前执行完所有的微任务")])]),t._v(" "),s("p",[t._v("加入宏队列的事件")]),t._v(" "),s("ul",[s("li",[t._v("主执行函数")]),t._v(" "),s("li",[t._v("定时器")]),t._v(" "),s("li",[t._v("ajax 回调函数")]),t._v(" "),s("li",[t._v("I/O 、UI 交互事件")])]),t._v(" "),s("p",[t._v("加入微队列的事件")]),t._v(" "),s("ul",[s("li",[t._v("Promise 回调")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationObserver"),s("OutboundLink")],1),t._v(" ：监视对DOM树所做更改的能力")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-定时器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-定时器"}},[t._v("#")]),t._v(" 2.2 定时器")]),t._v(" "),s("h4",{attrs:{id:"settimeout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#settimeout"}},[t._v("#")]),t._v(" setTimeout")]),t._v(" "),s("p",[t._v("在指定的时间后执行一段代码")]),t._v(" "),s("h4",{attrs:{id:"setinterval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setinterval"}},[t._v("#")]),t._v(" setInterval")]),t._v(" "),s("p",[t._v("以固定的时间间隔，重复运行一段代码")]),t._v(" "),s("p",[t._v("当要在页面上显示动画时，时间间隔应当设置为 16.7 ms ，以达到每秒渲染 60 帧的效果。但是，更多的帧意味着更多的处理，这通常会导致卡顿和跳跃-也称为丢帧或跳帧。")]),t._v(" "),s("h4",{attrs:{id:"requestanimationframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe"}},[t._v("#")]),t._v(" requestAnimationFrame")]),t._v(" "),s("p",[s("code",[t._v("setInterval()")]),t._v(" 的现代版本，旨在浏览器中高效运行动画。在浏览器下一次重新绘制显示之前执行指定的代码块，从而允许动画在适当的帧率下运行，而不管它在什么环境中运行。")]),t._v(" "),s("blockquote",[s("p",[t._v("它是针对 "),s("code",[t._v("setInterval()")]),t._v(" 遇到的问题创建的，比如 "),s("code",[t._v("setInterval()")]),t._v(" 并不是针对设备优化的帧率运行，有时会丢帧。还有即使该选项卡不是活动的选项卡或动画滚出页面等问题 。")])]),t._v(" "),s("p",[t._v("动画的平滑度直接取决于动画的帧速率，并以每秒帧数（"),s("code",[t._v("fps")]),t._v("）为单位进行测量。这个数字越高，动画看起来就越平滑。")]),t._v(" "),s("p",[s("code",[t._v("requestAnimationFrame()")]),t._v(" 总是试图尽可能接近 60 帧/秒的值，当然有时这是不可能的。如果有一个非常复杂的动画，在一个缓慢的计算机上运行它，帧速率将更少。 "),s("code",[t._v("requestAnimationFrame()")]),t._v(" 会"),s("strong",[t._v("尽其所能")]),t._v("利用现有资源提升帧速率。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("如果动画处于屏幕外，则浏览器不会去执行动画代码。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-promise"}},[t._v("#")]),t._v(" 3. Promise")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1MJ41197Eu",target:"_blank",rel:"noopener noreferrer"}},[t._v("尚硅谷Promise教程(promise前端进阶必学)——B站"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("strong",[t._v("Promise 是 JavaScript 中进行异步编程的新的解决方案。从语法上讲， Promise 是一个构造函数；从功能上说， Promise 对象用来封装一个异步操作并可以获取其结果。")])]),t._v(" "),s("p",[s("strong",[t._v("优势")])]),t._v(" "),s("ul",[s("li",[t._v("指定回调函数的方式更加灵活（比解决回调地狱更能体现个人技术深度）\n"),s("ul",[s("li",[t._v("纯回调方式必须在启动异步任务之前指定")]),t._v(" "),s("li",[t._v("Promise 指定时机更加灵活，甚至可以在异步任务结束后指定")]),t._v(" "),s("li",[t._v("Promise 可指定多个回调函数")])])]),t._v(" "),s("li",[t._v("支持链式调用\n"),s("ul",[s("li",[t._v("纯回调方式会引发回调地狱问题")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-1-执行器函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-执行器函数"}},[t._v("#")]),t._v(" 3.1 执行器函数")]),t._v(" "),s("p",[t._v("一个 Promise 对象中包含执行器和异步操作，执行器的操作是同步执行的。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promise1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内部执行器，是同步执行的")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异步任务")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 状态改变")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npromise1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2, 3, 4")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("h3",{attrs:{id:"_3-2-generator-与-async-await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-generator-与-async-await"}},[t._v("#")]),t._v(" 3.2 Generator 与 async/await")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_21602341/article/details/87820778",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈js中的回调地狱问题"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("纯回调函数会造成回调地狱问题：")]),t._v(" "),s("ul",[s("li",[t._v("回调函数嵌套调用，外部回调函数异步执行的结果是内部嵌套回调函数执行的条件")]),t._v(" "),s("li",[t._v("当有多个回调函数如此嵌套时，不便于阅读，也不便于进行异常处理")])]),t._v(" "),s("p",[s("code",[t._v("Promise")]),t._v(" 能够在一定程度上改善回调地狱的状况，但其 "),s("code",[t._v("then")]),t._v(" 链过长时，也会产生执行流程的问题。")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("Generator")]),t._v(" 生成器来使用同步的方式编写异步操作，彻底解决回调流程问题。")]),t._v(" "),s("p",[s("code",[t._v("async/await")]),t._v(" 是 "),s("code",[t._v("Generator")]),t._v(" 的语法糖。")])])}),[],!1,null,null,null);a.default=r.exports}}]);