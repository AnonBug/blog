(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{689:function(t,s,a){"use strict";a.r(s);var e=a(26),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-相关"}},[t._v("#")]),t._v(" react 相关")]),t._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/getting-started.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方指南"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("在 react 应用程序由两大重要组成：元素和组件。")]),t._v(" "),a("h2",{attrs:{id:"元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素"}},[t._v("#")]),t._v(" 元素")]),t._v(" "),a("p",[t._v("React 元素是构成 React 应用的最小砖块，描述了屏幕上看到的内容（DOM）。React 元素开销极小，React 保证了 React 元素与 DOM 元素的一致。")]),t._v(" "),a("p",[t._v("React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。更新 UI 唯一的方式是创建一个全新的元素。")]),t._v(" "),a("h3",{attrs:{id:"jsx-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx-语法"}},[t._v("#")]),t._v(" JSX 语法")]),t._v(" "),a("p",[t._v("JSX 是 JavaScript 的扩展，将 UI 和 逻辑 结合起来，有利于描述页面应有的交互本质。React 负责将这些语法生成元素。\nBabel 会把 JSX 转译成一个名为 React.createElement() 函数调用。React.createElement() 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意：这是简化过的结构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    className"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greeting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, world!'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("这些对象被称为 “React 元素”。它们描述了你希望在屏幕上看到的内容。React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新。")]),t._v(" "),a("p",[a("strong",[t._v("React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合")]),t._v("，通过将元素和逻辑共同存放在 组件 中，以实现关注点分离。")]),t._v(" "),a("blockquote",[a("p",[t._v("关注点分离：日常生活中解决复杂问题的一种"),a("strong",[t._v("系统思维方法")]),t._v("。思路是，先将复杂问题做合理的分解，再分别仔细研究问题的不同侧面 (关注点)，最后综合各方面的结果，合成整体的解决方案。")])]),t._v(" "),a("p",[t._v("JSX 本质上是一个表达式。")]),t._v(" "),a("h4",{attrs:{id:"jsx-能够防注入攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx-能够防注入攻击"}},[t._v("#")]),t._v(" JSX 能够防注入攻击")]),t._v(" "),a("p",[t._v("React DOM 在"),a("strong",[t._v("渲染所有输入内容之前，默认会进行转义")]),t._v("。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。")]),t._v(" "),a("h2",{attrs:{id:"组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),a("p",[t._v("从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。")]),t._v(" "),a("p",[t._v("根据组件的定义方式可分为函数组件和类组件。")]),t._v(" "),a("p",[t._v("React 内部对两种组件的处理：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 Greeting 是一个函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Greeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <p>Hello</p>")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 Greeting 是一个类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Greeting {}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <p>Hello</p>")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"函数组件与类组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组件与类组件"}},[t._v("#")]),t._v(" 函数组件与类组件")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hook 会因为在渲染时创建函数而变慢吗？——官方指南"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("从官方的观点，应该是更推荐使用 函数组件。")]),t._v(" "),a("ul",[a("li",[t._v("Hook 避免了 class 需要的额外开支，像是创建类实例和在构造函数中绑定事件处理器的成本。")]),t._v(" "),a("li",[t._v("没有计划从 React 中移除 class……")]),t._v(" "),a("li",[t._v("我们准备让 Hook 覆盖所有 class 组件的使用场景，但是我们将继续为 class 组件提供支持。")])]),t._v(" "),a("h3",{attrs:{id:"纯组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯组件"}},[t._v("#")]),t._v(" 纯组件")]),t._v(" "),a("blockquote",[a("p",[t._v("纯函数：不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。")])]),t._v(" "),a("p",[t._v("所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。为了实现 UI 交互，组件可以维护自有的状态 state 。")]),t._v(" "),a("p",[t._v("state 的更新是异步的，因为 React 为了提升性能，会收集多个 setState 一次更新。")]),t._v(" "),a("h3",{attrs:{id:"与元素的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与元素的区别"}},[t._v("#")]),t._v(" 与元素的区别")]),t._v(" "),a("p",[t._v("一个 Element 是一个简单的对象，它描述了你希望在屏幕上以 DOM 节点或其他组件的形式呈现的内容。")]),t._v(" "),a("p",[t._v("而一个组件可以用多种不同方式声明。它可以是一个含有 render() 方法的类。或者，在简单的情况中，它可以定义为函数。无论哪种情况，它都将 props 作为输入，并返回一个 JSX 树作为输出。")]),t._v(" "),a("h3",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("h3",{attrs:{id:"组合代替继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合代替继承"}},[t._v("#")]),t._v(" 组合代替继承")]),t._v(" "),a("h3",{attrs:{id:"context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),a("p",[t._v("Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。")]),t._v(" "),a("p",[t._v("Context 设计目的是为了共享那些对于一个组件树而言是 “全局” 的数据，例如当前认证的用户、主题或首选语言。")]),t._v(" "),a("p",[t._v("也有一些其它方案可以解决父组件向深嵌套的子组件传递 prop 的方案：")]),t._v(" "),a("ul",[a("li",[t._v("组件组合：把子组件定义在父组件内，然后传递子组件本身")]),t._v(" "),a("li",[t._v("使用 render prop 以加强父子组件间的渲染通信")])]),t._v(" "),a("p",[t._v("有的时候在组件树中很多不同层级的组件需要访问同样的一批数据。Context 能让你将这些数据向组件树下所有的组件进行 “广播”，所有的组件都能访问到这些数据，也能访问到后续的数据更新。")]),t._v(" "),a("p",[t._v("Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。")]),t._v(" "),a("h2",{attrs:{id:"hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook"}},[t._v("#")]),t._v(" HOOK")]),t._v(" "),a("p",[t._v("Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性，是一些可以让你在函数组件里 "),a("strong",[t._v("“钩入” React state 及生命周期等特性")]),t._v("的函数。")]),t._v(" "),a("h3",{attrs:{id:"为什么使用-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-hook"}},[t._v("#")]),t._v(" 为什么使用 HOOK")]),t._v(" "),a("ol",[a("li",[t._v("在组件之间复用状态逻辑很难")])]),t._v(" "),a("p",[t._v("React 没有提供将可复用性行为 “附加” 到组件的途径，你可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使你在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("复杂组件变得难以理解")])]),t._v(" "),a("p",[t._v("组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。每个生命周期常常包含一些不相关的逻辑。")]),t._v(" "),a("p",[t._v("在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。")]),t._v(" "),a("p",[t._v("为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("难以理解的 class")])]),t._v(" "),a("p",[t._v("你必须去理解 JavaScript 中 this 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。")]),t._v(" "),a("p",[t._v("class 不能很好的压缩，并且会使热重载出现不稳定的情况。")]),t._v(" "),a("p",[t._v("为了解决这些问题，Hook 使你在非 class 的情况下可以使用更多的 React 特性。 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术。")]),t._v(" "),a("h3",{attrs:{id:"使用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用规则"}},[t._v("#")]),t._v(" 使用规则")]),t._v(" "),a("ul",[a("li",[t._v("只能在函数最顶层调用 Hook。不要在循环、条件判断或者子函数中调用。\n"),a("ul",[a("li",[t._v("如果需要条件判断，可以在 Hook 内部实现")])])]),t._v(" "),a("li",[t._v("只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。")]),t._v(" "),a("li",[t._v("Hook 使用了 JavaScript 的闭包机制，而不用在 JavaScript 已经提供了解决方案的情况下，还引入特定的 React API。")])]),t._v(" "),a("h4",{attrs:{id:"使用多个-usestate-时-react-怎么知道哪个是哪个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用多个-usestate-时-react-怎么知道哪个是哪个"}},[t._v("#")]),t._v(" 使用多个 useState 时，React 怎么知道哪个是哪个")]),t._v(" "),a("p",[t._v("React 使用 Hook 函数的调用顺序来保证对应关系。因为通过上述规则，保证了在每次渲染中，Hook 的调用顺序都是相同的。")]),t._v(" "),a("h3",{attrs:{id:"常用-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-hook"}},[t._v("#")]),t._v(" 常用 HOOK")]),t._v(" "),a("h4",{attrs:{id:"usestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),a("ul",[a("li",[t._v("参数：初始 state")]),t._v(" "),a("li",[t._v("返回值：当前 state 以及更新 state 的函数")])]),t._v(" "),a("p",[t._v("State 变量可以很好地存储对象和数组，因此，你仍然可以将相关数据分为一组。然而，不像 class 中的 this.setState，"),a("strong",[t._v("更新 state 变量总是替换它而不是合并它")]),t._v("。")]),t._v(" "),a("p",[t._v("state 只在组件首次渲染的时候被创建。在下一次重新渲染时，useState 返回给我们当前的 state。否则它就不是 “state” 了！")]),t._v(" "),a("h4",{attrs:{id:"useeffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect")]),t._v(" "),a("p",[a("strong",[t._v("副作用")]),t._v("：数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作用。")]),t._v(" "),a("p",[t._v("副作用分为两种：需要清除的、不需要清除的。")]),t._v(" "),a("p",[t._v("当你调用 useEffect 时，就是在告诉 React 在"),a("strong",[t._v("完成对 DOM 的更改后")]),t._v("运行你的 “副作用” 函数。整合了 componentDidMount、componentDidUpdate 和 componentWillUnmount 生命周期函数。")]),t._v(" "),a("p",[t._v("有一些副作用，我们希望它在每次渲染之后执行 —— 但 React 的 class 组件没有提供这样的方法。即使我们提取出一个方法，我们还是要在两个地方（componentDidMount、componentDidUpdate）调用它。")]),t._v(" "),a("p",[t._v("通过使用 Hook，你可以把组件内相关的副作用组织在一起（例如创建订阅及取消订阅），而不要把它们拆分到不同的生命周期函数里。")]),t._v(" "),a("ul",[a("li",[t._v("默认情况下，React 会在每次渲染后调用副作用函数 —— 包括第一次渲染的时候。")]),t._v(" "),a("li",[t._v("可以访问到组件的 props 和 state")]),t._v(" "),a("li",[t._v("通过返回一个函数来指定如何 “清除” 副作用")]),t._v(" "),a("li",[t._v("React 会在执行当前 effect 之前对上一个 effect 进行清除。\n"),a("ul",[a("li",[t._v("目的是为了减少由于 prop 更新带来的数据不一致（effect 覆盖了 componentDidUpdate，却没法在 update 阶段手动更新 state）")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意")])]),t._v(" "),a("p",[t._v("传递给 useEffect 的函数在每次渲染中都会有所不同，这是刻意为之的。事实上这正是我们可以在 effect 中获取最新的 count 的值（"),a("strong",[t._v("重新生成 effect 函数，产生新闭包，包进最新的 state")]),t._v("），而不用担心其过期的原因。每次我们重新渲染，都会生成新的 effect，替换掉之前的。某种意义上讲，effect 更像是渲染结果的一部分 —— 每个 effect “属于” 一次特定的渲染。")]),t._v(" "),a("p",[t._v("与 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 调度的 effect "),a("strong",[t._v("不会阻塞")]),t._v("浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 useLayoutEffect Hook 供你使用，其 API 与 useEffect 相同。")]),t._v(" "),a("p",[a("strong",[t._v("进阶")])]),t._v(" "),a("p",[t._v("可以使用多个 useEffect ，将不相关逻辑分离到不同的 effect 中，实现关注点分离。（又一个抛弃 class 组件的理由）React 将按照 effect 声明的顺序依次调用组件中的每一个 effect。")]),t._v(" "),a("p",[t._v("可以向 useEffect 传入第二个数组参数以优化渲染频次。数组中包含了所有外部作用域中会随时间变化并且在 effect 中使用的变量，否则你的代码会引用到先前渲染中的旧变量。")]),t._v(" "),a("p",[t._v("关于这种优化方式有一些 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-faq.html#performance-optimizations",target:"_blank",rel:"noopener noreferrer"}},[t._v("注意事项"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"自定义-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-hook"}},[t._v("#")]),t._v(" 自定义 HOOK")]),t._v(" "),a("p",[t._v("Hook 是一种复用状态逻辑的方式，它不复用 state 本身。")]),t._v(" "),a("p",[t._v("Hook 的每次调用都有一个完全独立的 state")]),t._v(" "),a("p",[t._v("你可以创建涵盖各种场景的自定义 Hook，如表单处理、动画、订阅声明、计时器，甚至可能还有更多我们没想到的场景。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义的例子，订阅用户状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useEffect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("friendID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("isOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setIsOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleStatusChange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIsOnline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ChatAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribeToFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleStatusChange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      ChatAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribeFromFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleStatusChange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用自定义 hook")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isOnline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("friend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isOnline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Loading...'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isOnline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Online'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Offline'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[a("strong",[t._v("约定")])]),t._v(" "),a("ul",[a("li",[t._v("自定义 Hook 不需要具有特殊的标识。我们可以自由的决定它的参数是什么，以及它应该返回什么")]),t._v(" "),a("li",[t._v("自定义 Hook 应当以 use 开头，以便 React 检查其是否符合 Hook 规则")]),t._v(" "),a("li",[t._v("自定义 Hook 中的 state 和 effect 都是完全隔离的")])]),t._v(" "),a("h4",{attrs:{id:"useredux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useredux"}},[t._v("#")]),t._v(" useRedux")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.redux.org.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux——中文翻译"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"八股"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八股"}},[t._v("#")]),t._v(" 八股")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/semlinker/reactjs-interview-questions",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 面试题 & 回答"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"react-的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-的特性"}},[t._v("#")]),t._v(" React 的特性")]),t._v(" "),a("ul",[a("li",[t._v("虚拟 DOM")]),t._v(" "),a("li",[t._v("服务端渲染")]),t._v(" "),a("li",[t._v("单向数据流、数据绑定")]),t._v(" "),a("li",[t._v("可复用/可组合的组件式 UI 开发视图")])]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("h2",{attrs:{id:"最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[t._v("#")]),t._v(" 最佳实践")]),t._v(" "),a("h2",{attrs:{id:"mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[t._v("#")]),t._v(" MVVM")]),t._v(" "),a("ul",[a("li",[t._v("React 与 jQuery 的区别是什么？")]),t._v(" "),a("li",[t._v("组件完整的生命周期")]),t._v(" "),a("li",[t._v("React 里 setState 方法是同步的还是异步的？")]),t._v(" "),a("li",[t._v("组件属性受控和不受控是什么意思？")]),t._v(" "),a("li",[t._v("React 里组件间通信用什么方案？")]),t._v(" "),a("li",[t._v("React 高阶组件（HOC）是什么，在什么场景使用？有什么副作用？")]),t._v(" "),a("li",[t._v("什么是 Stateless Component？")]),t._v(" "),a("li",[t._v("React 如何做性能优化？shouldComponentUpdate")]),t._v(" "),a("li",[t._v("父组件如何改变内部子组件的渲染逻辑？\n"),a("ul",[a("li",[t._v("this.props.children")]),t._v(" "),a("li",[t._v("React.Children.map")]),t._v(" "),a("li",[t._v("React.cloneElement")])])]),t._v(" "),a("li",[t._v("单页面应用：React-Router\n"),a("ul",[a("li",[t._v("/1 跳转到 /2 时页面组件是否会被重新初始化渲染")]),t._v(" "),a("li",[t._v("如何实现类打点的全局需求，onEnter")]),t._v(" "),a("li",[t._v("页面 bundle 太大有什么解决方案")])])]),t._v(" "),a("li",[t._v("React 服务端渲染")]),t._v(" "),a("li",[t._v("Vue 双向绑定实现原理\n"),a("ul",[a("li",[t._v("getter/setter + 劫持数组方法")]),t._v(" "),a("li",[t._v("还有哪些方案？脏检查/Proxy，三个方案优缺点")]),t._v(" "),a("li",[t._v("vue 里在 data 上添加一个新属性 view 是否会得到响应？不会，为什么？怎么解决？")])])]),t._v(" "),a("li",[t._v("Vue 2.0 引入 vdom 的原因是什么\n"),a("ul",[a("li",[t._v("vdom 有哪些优势：diff 性能、标准化数据适配多端渲染")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);